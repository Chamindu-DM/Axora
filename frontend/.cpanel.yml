---
deployment:
  tasks:
    # Install Node.js dependencies
    - export DEPLOYPATH=/home/$USER/public_html
    - export NODEPATH=/home/$USER/nodevenv/public_html/$NODE_VERSION/bin
    - export PATH=$NODEPATH:$PATH
    
    # Navigate to the deployment directory
    - cd $DEPLOYPATH
    
    # Install dependencies (production only)
    - npm ci --only=production
    
    # Build the Next.js application
    - npm run build
    
    # Create or update the startup file
    - |
      cat > server.js << 'EOF'
      const { createServer } = require('http')
      const { parse } = require('url')
      const next = require('next')
      
      const dev = process.env.NODE_ENV !== 'production'
      const hostname = process.env.HOST || 'localhost'
      const port = process.env.PORT || 3000
      
      const app = next({ dev, hostname, port })
      const handle = app.getRequestHandler()
      
      app.prepare().then(() => {
        createServer(async (req, res) => {
          try {
            const parsedUrl = parse(req.url, true)
            await handle(req, res, parsedUrl)
          } catch (err) {
            console.error('Error occurred handling', req.url, err)
            res.statusCode = 500
            res.end('internal server error')
          }
        })
        .once('error', (err) => {
          console.error(err)
          process.exit(1)
        })
        .listen(port, () => {
          console.log(`> Ready on http://${hostname}:${port}`)
        })
      })
      EOF
    
    # Set proper permissions
    - find $DEPLOYPATH -type f -exec chmod 644 {} \;
    - find $DEPLOYPATH -type d -exec chmod 755 {} \;
    - chmod +x server.js
    
    # Clean up development files and cache
    - rm -rf .next/cache
    - rm -rf node_modules/.cache
    
    # Create .htaccess for better routing (if using static export)
    - |
      if [ -d "out" ]; then
        cat > .htaccess << 'EOF'
        RewriteEngine On
        
        # Handle client-side routing for SPA
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule . /index.html [L]
        
        # Gzip compression
        <IfModule mod_deflate.c>
          AddOutputFilterByType DEFLATE text/plain
          AddOutputFilterByType DEFLATE text/html
          AddOutputFilterByType DEFLATE text/xml
          AddOutputFilterByType DEFLATE text/css
          AddOutputFilterByType DEFLATE application/xml
          AddOutputFilterByType DEFLATE application/xhtml+xml
          AddOutputFilterByType DEFLATE application/rss+xml
          AddOutputFilterByType DEFLATE application/javascript
          AddOutputFilterByType DEFLATE application/x-javascript
        </IfModule>
        
        # Cache static assets
        <IfModule mod_expires.c>
          ExpiresActive on
          ExpiresByType text/css "access plus 1 year"
          ExpiresByType application/javascript "access plus 1 year"
          ExpiresByType image/png "access plus 1 year"
          ExpiresByType image/jpg "access plus 1 year"
          ExpiresByType image/jpeg "access plus 1 year"
        </IfModule>
        EOF
      fi
    
    # Log completion
    - echo "Deployment completed successfully at $(date)"
    - echo "Node.js version: $(node --version)"
    - echo "NPM version: $(npm --version)"
